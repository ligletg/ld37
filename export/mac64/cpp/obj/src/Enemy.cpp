// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c595a05c1c7a687d_8_new,"Enemy","new",0x35d4571a,"Enemy.new","Enemy.hx",8,0xbda88996)
static const int _hx_array_data_03a88228_1[] = {
	(int)0,(int)1,(int)0,(int)2,
};
static const int _hx_array_data_03a88228_2[] = {
	(int)3,(int)4,(int)3,(int)5,
};
static const int _hx_array_data_03a88228_3[] = {
	(int)6,(int)7,(int)6,(int)8,
};
HX_DEFINE_STACK_FRAME(_hx_pos_c595a05c1c7a687d_30_draw,"Enemy","draw",0xdd65880a,"Enemy.draw","Enemy.hx",30,0xbda88996)

void Enemy_obj::__construct( ::Dynamic __o_X, ::Dynamic __o_Y,::String EType){
 ::Dynamic X = __o_X.Default(0);
 ::Dynamic Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_8_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(EType,"EType")
HXLINE(  10)		this->speed = ((Float)140);
HXLINE(  14)		super::__construct(X,Y,null());
HXLINE(  15)		this->etype = EType;
HXLINE(  16)		this->loadGraphic(((HX_("assets/images/enemy-",d0,c6,05,40) + this->etype) + HX_(".png",3b,2d,bd,1e)),true,(int)16,(int)16,null(),null());
HXLINE(  17)		::haxe::IMap_obj::set(this->_facingFlip,(int)1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),false)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  18)		::haxe::IMap_obj::set(this->_facingFlip,(int)16, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),true)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  19)		this->animation->add(HX_("d",64,00,00,00),::Array_obj< int >::fromData( _hx_array_data_03a88228_1,4),(int)6,false,null(),null());
HXLINE(  20)		this->animation->add(HX_("lr",86,5e,00,00),::Array_obj< int >::fromData( _hx_array_data_03a88228_2,4),(int)6,false,null(),null());
HXLINE(  21)		this->animation->add(HX_("u",75,00,00,00),::Array_obj< int >::fromData( _hx_array_data_03a88228_3,4),(int)6,false,null(),null());
HXLINE(  22)		 ::flixel::math::FlxPoint _hx_tmp = this->drag;
HXDLIN(  22)		_hx_tmp->set_x(this->drag->set_y((int)10));
HXLINE(  23)		this->set_width((int)8);
HXLINE(  24)		this->set_height((int)14);
HXLINE(  25)		this->offset->set_x((int)4);
HXLINE(  26)		this->offset->set_y((int)2);
            	}

Dynamic Enemy_obj::__CreateEmpty() { return new Enemy_obj; }

void *Enemy_obj::_hx_vtable = 0;

Dynamic Enemy_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Enemy_obj > _hx_result = new Enemy_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Enemy_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0b6ffd77) {
		if (inClassId<=(int)0x03a88228) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x03a88228;
		} else {
			return inClassId==(int)0x0b6ffd77;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void Enemy_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_30_draw)
            	HX_STACK_THIS(this)
HXLINE(  31)		bool _hx_tmp;
HXDLIN(  31)		bool _hx_tmp1;
HXDLIN(  31)		if ((this->velocity->x == (int)0)) {
HXLINE(  31)			_hx_tmp1 = (this->velocity->y != (int)0);
            		}
            		else {
HXLINE(  31)			_hx_tmp1 = true;
            		}
HXDLIN(  31)		if (_hx_tmp1) {
HXLINE(  31)			_hx_tmp = (this->touching == (int)0);
            		}
            		else {
HXLINE(  31)			_hx_tmp = false;
            		}
HXDLIN(  31)		if (_hx_tmp) {
HXLINE(  33)			if ((::Math_obj::abs(this->velocity->x) > ::Math_obj::abs(this->velocity->y))) {
HXLINE(  35)				if ((this->velocity->x < (int)0)) {
HXLINE(  36)					this->set_facing((int)1);
            				}
            				else {
HXLINE(  38)					this->set_facing((int)16);
            				}
            			}
            			else {
HXLINE(  42)				if ((this->velocity->y < (int)0)) {
HXLINE(  43)					this->set_facing((int)256);
            				}
            				else {
HXLINE(  45)					this->set_facing((int)4096);
            				}
            			}
HXLINE(  48)			switch((int)(this->facing)){
            				case (int)1: case (int)16: {
HXLINE(  51)					this->animation->play(HX_("lr",86,5e,00,00),null(),null(),null());
            				}
            				break;
            				case (int)256: {
HXLINE(  53)					this->animation->play(HX_("u",75,00,00,00),null(),null(),null());
            				}
            				break;
            				case (int)4096: {
HXLINE(  55)					this->animation->play(HX_("d",64,00,00,00),null(),null(),null());
            				}
            				break;
            			}
            		}
HXLINE(  58)		this->super::draw();
            	}



hx::ObjectPtr< Enemy_obj > Enemy_obj::__new( ::Dynamic __o_X, ::Dynamic __o_Y,::String EType) {
	hx::ObjectPtr< Enemy_obj > __this = new Enemy_obj();
	__this->__construct(__o_X,__o_Y,EType);
	return __this;
}

hx::ObjectPtr< Enemy_obj > Enemy_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_X, ::Dynamic __o_Y,::String EType) {
	Enemy_obj *__this = (Enemy_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Enemy_obj), true, "Enemy"));
	*(void **)__this = Enemy_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,EType);
	return __this;
}

Enemy_obj::Enemy_obj()
{
}

void Enemy_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Enemy);
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(etype,"etype");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Enemy_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(etype,"etype");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Enemy_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed); }
		if (HX_FIELD_EQ(inName,"etype") ) { return hx::Val( etype); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Enemy_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"etype") ) { etype=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Enemy_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("etype","\x9f","\x89","\x81","\x74"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Enemy_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Enemy_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsString,(int)offsetof(Enemy_obj,etype),HX_HCSTRING("etype","\x9f","\x89","\x81","\x74")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Enemy_obj_sStaticStorageInfo = 0;
#endif

static ::String Enemy_obj_sMemberFields[] = {
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("etype","\x9f","\x89","\x81","\x74"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	::String(null()) };

static void Enemy_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Enemy_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Enemy_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Enemy_obj::__mClass,"__mClass");
};

#endif

hx::Class Enemy_obj::__mClass;

void Enemy_obj::__register()
{
	hx::Object *dummy = new Enemy_obj;
	Enemy_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Enemy","\x28","\x82","\xa8","\x03");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Enemy_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Enemy_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Enemy_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Enemy_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Enemy_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Enemy_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

