// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledLayer
#include <flixel/addons/editors/tiled/TiledLayer.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledMap
#include <flixel/addons/editors/tiled/TiledMap.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledObject
#include <flixel/addons/editors/tiled/TiledObject.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledObjectLayer
#include <flixel/addons/editors/tiled/TiledObjectLayer.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledPropertySet
#include <flixel/addons/editors/tiled/TiledPropertySet.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledTileSet
#include <flixel/addons/editors/tiled/TiledTileSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_AttribAccess
#include <haxe/xml/_Fast/AttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasAttribAccess
#include <haxe/xml/_Fast/HasAttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasNodeAccess
#include <haxe/xml/_Fast/HasNodeAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeAccess
#include <haxe/xml/_Fast/NodeAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeListAccess
#include <haxe/xml/_Fast/NodeListAccess.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_30d0ee2c03993c65_73_new,"flixel.addons.editors.tiled.TiledObject","new",0x3a8d437e,"flixel.addons.editors.tiled.TiledObject.new","flixel/addons/editors/tiled/TiledObject.hx",73,0x5c109e14)
HX_DEFINE_STACK_FRAME(_hx_pos_30d0ee2c03993c65_135_getPoints,"flixel.addons.editors.tiled.TiledObject","getPoints",0xa25a38f7,"flixel.addons.editors.tiled.TiledObject.getPoints","flixel/addons/editors/tiled/TiledObject.hx",135,0x5c109e14)
HX_DEFINE_STACK_FRAME(_hx_pos_30d0ee2c03993c65_149_get_flippedHorizontally,"flixel.addons.editors.tiled.TiledObject","get_flippedHorizontally",0x96c60c88,"flixel.addons.editors.tiled.TiledObject.get_flippedHorizontally","flixel/addons/editors/tiled/TiledObject.hx",149,0x5c109e14)
HX_DEFINE_STACK_FRAME(_hx_pos_30d0ee2c03993c65_154_get_flippedVertically,"flixel.addons.editors.tiled.TiledObject","get_flippedVertically",0xd9ef50da,"flixel.addons.editors.tiled.TiledObject.get_flippedVertically","flixel/addons/editors/tiled/TiledObject.hx",154,0x5c109e14)
HX_DEFINE_STACK_FRAME(_hx_pos_30d0ee2c03993c65_18_boot,"flixel.addons.editors.tiled.TiledObject","boot",0xf926cb54,"flixel.addons.editors.tiled.TiledObject.boot","flixel/addons/editors/tiled/TiledObject.hx",18,0x5c109e14)
HX_DEFINE_STACK_FRAME(_hx_pos_30d0ee2c03993c65_19_boot,"flixel.addons.editors.tiled.TiledObject","boot",0xf926cb54,"flixel.addons.editors.tiled.TiledObject.boot","flixel/addons/editors/tiled/TiledObject.hx",19,0x5c109e14)
HX_DEFINE_STACK_FRAME(_hx_pos_30d0ee2c03993c65_21_boot,"flixel.addons.editors.tiled.TiledObject","boot",0xf926cb54,"flixel.addons.editors.tiled.TiledObject.boot","flixel/addons/editors/tiled/TiledObject.hx",21,0x5c109e14)
HX_DEFINE_STACK_FRAME(_hx_pos_30d0ee2c03993c65_22_boot,"flixel.addons.editors.tiled.TiledObject","boot",0xf926cb54,"flixel.addons.editors.tiled.TiledObject.boot","flixel/addons/editors/tiled/TiledObject.hx",22,0x5c109e14)
HX_DEFINE_STACK_FRAME(_hx_pos_30d0ee2c03993c65_23_boot,"flixel.addons.editors.tiled.TiledObject","boot",0xf926cb54,"flixel.addons.editors.tiled.TiledObject.boot","flixel/addons/editors/tiled/TiledObject.hx",23,0x5c109e14)
HX_DEFINE_STACK_FRAME(_hx_pos_30d0ee2c03993c65_24_boot,"flixel.addons.editors.tiled.TiledObject","boot",0xf926cb54,"flixel.addons.editors.tiled.TiledObject.boot","flixel/addons/editors/tiled/TiledObject.hx",24,0x5c109e14)
HX_DEFINE_STACK_FRAME(_hx_pos_30d0ee2c03993c65_25_boot,"flixel.addons.editors.tiled.TiledObject","boot",0xf926cb54,"flixel.addons.editors.tiled.TiledObject.boot","flixel/addons/editors/tiled/TiledObject.hx",25,0x5c109e14)
namespace flixel{
namespace addons{
namespace editors{
namespace tiled{

void TiledObject_obj::__construct( ::haxe::xml::Fast source, ::flixel::addons::editors::tiled::TiledObjectLayer parent){
            	HX_GC_STACKFRAME(&_hx_pos_30d0ee2c03993c65_73_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(parent,"parent")
HXLINE(  74)		this->xmlData = source;
HXLINE(  75)		this->layer = parent;
HXLINE(  76)		::String _hx_tmp;
HXDLIN(  76)		if (source->has->resolve(HX_("name",4b,72,ff,48))) {
HXLINE(  76)			_hx_tmp = source->att->resolve(HX_("name",4b,72,ff,48));
            		}
            		else {
HXLINE(  76)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN(  76)		this->name = _hx_tmp;
HXLINE(  77)		::String _hx_tmp1;
HXDLIN(  77)		if (source->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(  77)			_hx_tmp1 = source->att->resolve(HX_("type",ba,f2,08,4d));
            		}
            		else {
HXLINE(  78)			if (::haxe::IMap_obj::exists(parent->properties->keys,HX_("defaultType",1b,ec,c7,1e))) {
HXLINE(  77)				_hx_tmp1 = ( (::String)(::haxe::IMap_obj::get(parent->properties->keys,HX_("defaultType",1b,ec,c7,1e))) );
            			}
            			else {
HXLINE(  77)				_hx_tmp1 = HX_("",00,00,00,00);
            			}
            		}
HXDLIN(  77)		this->type = _hx_tmp1;
HXLINE(  79)		this->x = ::Std_obj::parseInt(source->att->resolve(HX_("x",78,00,00,00)));
HXLINE(  80)		this->y = ::Std_obj::parseInt(source->att->resolve(HX_("y",79,00,00,00)));
HXLINE(  81)		int _hx_tmp2;
HXDLIN(  81)		if (source->has->resolve(HX_("width",06,b6,62,ca))) {
HXLINE(  81)			_hx_tmp2 = ::Std_obj::parseInt(source->att->resolve(HX_("width",06,b6,62,ca)));
            		}
            		else {
HXLINE(  81)			_hx_tmp2 = (int)0;
            		}
HXDLIN(  81)		this->width = _hx_tmp2;
HXLINE(  82)		int _hx_tmp3;
HXDLIN(  82)		if (source->has->resolve(HX_("height",e7,07,4c,02))) {
HXLINE(  82)			_hx_tmp3 = ::Std_obj::parseInt(source->att->resolve(HX_("height",e7,07,4c,02)));
            		}
            		else {
HXLINE(  82)			_hx_tmp3 = (int)0;
            		}
HXDLIN(  82)		this->height = _hx_tmp3;
HXLINE(  83)		Float _hx_tmp4;
HXDLIN(  83)		if (source->has->resolve(HX_("rotation",3e,3d,86,08))) {
HXLINE(  83)			_hx_tmp4 = ::Std_obj::parseFloat(source->att->resolve(HX_("rotation",3e,3d,86,08)));
            		}
            		else {
HXLINE(  83)			_hx_tmp4 = (int)0;
            		}
HXDLIN(  83)		this->angle = _hx_tmp4;
HXLINE(  85)		this->objectType = (int)0;
HXLINE(  88)		this->shared = null();
HXLINE(  89)		this->gid = (int)-1;
HXLINE(  92)		bool _hx_tmp5;
HXDLIN(  92)		if (source->has->resolve(HX_("gid",02,84,4e,00))) {
HXLINE(  92)			_hx_tmp5 = (source->att->resolve(HX_("gid",02,84,4e,00)).length != (int)0);
            		}
            		else {
HXLINE(  92)			_hx_tmp5 = false;
            		}
HXDLIN(  92)		if (_hx_tmp5) {
HXLINE(  94)			this->gid = ::Std_obj::parseInt(source->att->resolve(HX_("gid",02,84,4e,00)));
HXLINE(  96)			{
HXLINE(  96)				HX_VARI(  ::Dynamic,set) = this->layer->map->tilesets->iterator();
HXDLIN(  96)				while(( (bool)(set->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  96)					HX_VARI_NAME(  ::flixel::addons::editors::tiled::TiledTileSet,set1,"set") = ( ( ::flixel::addons::editors::tiled::TiledTileSet)(set->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(  98)					this->shared = set1->getPropertiesByGid(this->gid);
HXLINE( 100)					if (hx::IsNotNull( this->shared )) {
HXLINE( 102)						goto _hx_goto_0;
            					}
            				}
            				_hx_goto_0:;
            			}
HXLINE( 106)			this->objectType = (int)4;
            		}
HXLINE( 110)		this->properties =  ::flixel::addons::editors::tiled::TiledPropertySet_obj::__alloc( HX_CTX );
HXLINE( 112)		{
HXLINE( 112)			HX_VARI(  ::_List::ListNode,_g_head) = source->nodes->resolve(HX_("properties",f3,fb,0e,61))->h;
HXDLIN( 112)			while(hx::IsNotNull( _g_head )){
HXLINE( 112)				HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN( 112)				_g_head = _g_head->next;
HXLINE( 114)				this->properties->extend(val);
            			}
            		}
HXLINE( 118)		if (source->hasNode->resolve(HX_("ellipse",de,40,86,0b))) {
HXLINE( 120)			this->objectType = (int)1;
            		}
            		else {
HXLINE( 122)			if (source->hasNode->resolve(HX_("polygon",7a,02,91,12))) {
HXLINE( 124)				this->objectType = (int)2;
HXLINE( 125)				this->getPoints(source->node->resolve(HX_("polygon",7a,02,91,12)));
            			}
            			else {
HXLINE( 127)				if (source->hasNode->resolve(HX_("polyline",40,ac,9a,2f))) {
HXLINE( 129)					this->objectType = (int)3;
HXLINE( 130)					this->getPoints(source->node->resolve(HX_("polyline",40,ac,9a,2f)));
            				}
            			}
            		}
            	}

Dynamic TiledObject_obj::__CreateEmpty() { return new TiledObject_obj; }

void *TiledObject_obj::_hx_vtable = 0;

Dynamic TiledObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TiledObject_obj > _hx_result = new TiledObject_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TiledObject_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5a975076;
}

void TiledObject_obj::getPoints( ::haxe::xml::Fast node){
            	HX_STACKFRAME(&_hx_pos_30d0ee2c03993c65_135_getPoints)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(node,"node")
HXLINE( 136)		this->points = ::Array_obj< ::Dynamic>::__new();
HXLINE( 138)		HX_VARI( ::Array< ::String >,pointsStr) = node->att->resolve(HX_("points",23,12,2e,f7)).split(HX_(" ",20,00,00,00));
HXLINE( 139)		HX_VAR( ::Array< ::String >,pair);
HXLINE( 140)		{
HXLINE( 140)			HX_VARI( int,_g) = (int)0;
HXDLIN( 140)			while((_g < pointsStr->length)){
HXLINE( 140)				HX_VARI( ::String,p) = pointsStr->__get(_g);
HXDLIN( 140)				_g = (_g + (int)1);
HXLINE( 142)				pair = p.split(HX_(",",2c,00,00,00));
HXLINE( 143)				::Array< ::Dynamic> _hx_tmp = this->points;
HXDLIN( 143)				Float X = ::Std_obj::parseFloat(pair->__get((int)0));
HXDLIN( 143)				Float Y = ::Std_obj::parseFloat(pair->__get((int)1));
HXDLIN( 143)				HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 143)				point->_inPool = false;
HXDLIN( 143)				_hx_tmp->push(point);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledObject_obj,getPoints,(void))

bool TiledObject_obj::get_flippedHorizontally(){
            	HX_STACKFRAME(&_hx_pos_30d0ee2c03993c65_149_get_flippedHorizontally)
            	HX_STACK_THIS(this)
HXLINE( 149)		return (((int)this->gid & (int)(int)-2147483648) > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TiledObject_obj,get_flippedHorizontally,return )

bool TiledObject_obj::get_flippedVertically(){
            	HX_STACKFRAME(&_hx_pos_30d0ee2c03993c65_154_get_flippedVertically)
            	HX_STACK_THIS(this)
HXLINE( 154)		return (((int)this->gid & (int)(int)1073741824) > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TiledObject_obj,get_flippedVertically,return )

int TiledObject_obj::FLIPPED_VERTICALLY_FLAG;

int TiledObject_obj::FLIPPED_HORIZONTALLY_FLAG;

int TiledObject_obj::RECTANGLE;

int TiledObject_obj::ELLIPSE;

int TiledObject_obj::POLYGON;

int TiledObject_obj::POLYLINE;

int TiledObject_obj::TILE;


hx::ObjectPtr< TiledObject_obj > TiledObject_obj::__new( ::haxe::xml::Fast source, ::flixel::addons::editors::tiled::TiledObjectLayer parent) {
	hx::ObjectPtr< TiledObject_obj > __this = new TiledObject_obj();
	__this->__construct(source,parent);
	return __this;
}

hx::ObjectPtr< TiledObject_obj > TiledObject_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::xml::Fast source, ::flixel::addons::editors::tiled::TiledObjectLayer parent) {
	TiledObject_obj *__this = (TiledObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TiledObject_obj), true, "flixel.addons.editors.tiled.TiledObject"));
	*(void **)__this = TiledObject_obj::_hx_vtable;
	__this->__construct(source,parent);
	return __this;
}

TiledObject_obj::TiledObject_obj()
{
}

void TiledObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TiledObject);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(xmlData,"xmlData");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(gid,"gid");
	HX_MARK_MEMBER_NAME(properties,"properties");
	HX_MARK_MEMBER_NAME(shared,"shared");
	HX_MARK_MEMBER_NAME(layer,"layer");
	HX_MARK_MEMBER_NAME(objectType,"objectType");
	HX_MARK_MEMBER_NAME(flippedHorizontally,"flippedHorizontally");
	HX_MARK_MEMBER_NAME(flippedVertically,"flippedVertically");
	HX_MARK_MEMBER_NAME(points,"points");
	HX_MARK_END_CLASS();
}

void TiledObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(xmlData,"xmlData");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(gid,"gid");
	HX_VISIT_MEMBER_NAME(properties,"properties");
	HX_VISIT_MEMBER_NAME(shared,"shared");
	HX_VISIT_MEMBER_NAME(layer,"layer");
	HX_VISIT_MEMBER_NAME(objectType,"objectType");
	HX_VISIT_MEMBER_NAME(flippedHorizontally,"flippedHorizontally");
	HX_VISIT_MEMBER_NAME(flippedVertically,"flippedVertically");
	HX_VISIT_MEMBER_NAME(points,"points");
}

hx::Val TiledObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"gid") ) { return hx::Val( gid); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle); }
		if (HX_FIELD_EQ(inName,"layer") ) { return hx::Val( layer); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"shared") ) { return hx::Val( shared); }
		if (HX_FIELD_EQ(inName,"points") ) { return hx::Val( points); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xmlData") ) { return hx::Val( xmlData); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getPoints") ) { return hx::Val( getPoints_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"properties") ) { return hx::Val( properties); }
		if (HX_FIELD_EQ(inName,"objectType") ) { return hx::Val( objectType); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"flippedVertically") ) { return hx::Val( inCallProp == hx::paccAlways ? get_flippedVertically() : flippedVertically); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"flippedHorizontally") ) { return hx::Val( inCallProp == hx::paccAlways ? get_flippedHorizontally() : flippedHorizontally); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_flippedVertically") ) { return hx::Val( get_flippedVertically_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_flippedHorizontally") ) { return hx::Val( get_flippedHorizontally_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TiledObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"gid") ) { gid=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { angle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layer") ) { layer=inValue.Cast<  ::flixel::addons::editors::tiled::TiledObjectLayer >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shared") ) { shared=inValue.Cast<  ::flixel::addons::editors::tiled::TiledPropertySet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"points") ) { points=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xmlData") ) { xmlData=inValue.Cast<  ::haxe::xml::Fast >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"properties") ) { properties=inValue.Cast<  ::flixel::addons::editors::tiled::TiledPropertySet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"objectType") ) { objectType=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"flippedVertically") ) { flippedVertically=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"flippedHorizontally") ) { flippedHorizontally=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TiledObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("xmlData","\xa1","\x27","\x79","\x6f"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("gid","\x02","\x84","\x4e","\x00"));
	outFields->push(HX_HCSTRING("properties","\xf3","\xfb","\x0e","\x61"));
	outFields->push(HX_HCSTRING("shared","\xa5","\x5e","\x2b","\x1d"));
	outFields->push(HX_HCSTRING("layer","\xd1","\x81","\xc0","\x6f"));
	outFields->push(HX_HCSTRING("objectType","\x19","\x69","\x41","\xcf"));
	outFields->push(HX_HCSTRING("flippedHorizontally","\xd3","\x6f","\x95","\xb0"));
	outFields->push(HX_HCSTRING("flippedVertically","\x65","\xbb","\x26","\xa7"));
	outFields->push(HX_HCSTRING("points","\x23","\x12","\x2e","\xf7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TiledObject_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TiledObject_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(TiledObject_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(TiledObject_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(TiledObject_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsString,(int)offsetof(TiledObject_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsString,(int)offsetof(TiledObject_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*::haxe::xml::Fast*/ ,(int)offsetof(TiledObject_obj,xmlData),HX_HCSTRING("xmlData","\xa1","\x27","\x79","\x6f")},
	{hx::fsFloat,(int)offsetof(TiledObject_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{hx::fsInt,(int)offsetof(TiledObject_obj,gid),HX_HCSTRING("gid","\x02","\x84","\x4e","\x00")},
	{hx::fsObject /*::flixel::addons::editors::tiled::TiledPropertySet*/ ,(int)offsetof(TiledObject_obj,properties),HX_HCSTRING("properties","\xf3","\xfb","\x0e","\x61")},
	{hx::fsObject /*::flixel::addons::editors::tiled::TiledPropertySet*/ ,(int)offsetof(TiledObject_obj,shared),HX_HCSTRING("shared","\xa5","\x5e","\x2b","\x1d")},
	{hx::fsObject /*::flixel::addons::editors::tiled::TiledObjectLayer*/ ,(int)offsetof(TiledObject_obj,layer),HX_HCSTRING("layer","\xd1","\x81","\xc0","\x6f")},
	{hx::fsInt,(int)offsetof(TiledObject_obj,objectType),HX_HCSTRING("objectType","\x19","\x69","\x41","\xcf")},
	{hx::fsBool,(int)offsetof(TiledObject_obj,flippedHorizontally),HX_HCSTRING("flippedHorizontally","\xd3","\x6f","\x95","\xb0")},
	{hx::fsBool,(int)offsetof(TiledObject_obj,flippedVertically),HX_HCSTRING("flippedVertically","\x65","\xbb","\x26","\xa7")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TiledObject_obj,points),HX_HCSTRING("points","\x23","\x12","\x2e","\xf7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TiledObject_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TiledObject_obj::FLIPPED_VERTICALLY_FLAG,HX_HCSTRING("FLIPPED_VERTICALLY_FLAG","\xcb","\x82","\xb6","\x97")},
	{hx::fsInt,(void *) &TiledObject_obj::FLIPPED_HORIZONTALLY_FLAG,HX_HCSTRING("FLIPPED_HORIZONTALLY_FLAG","\xdd","\x16","\x9f","\xd8")},
	{hx::fsInt,(void *) &TiledObject_obj::RECTANGLE,HX_HCSTRING("RECTANGLE","\x0f","\x44","\xd5","\x14")},
	{hx::fsInt,(void *) &TiledObject_obj::ELLIPSE,HX_HCSTRING("ELLIPSE","\xbe","\x14","\x5a","\x8b")},
	{hx::fsInt,(void *) &TiledObject_obj::POLYGON,HX_HCSTRING("POLYGON","\x5a","\xd6","\x64","\x92")},
	{hx::fsInt,(void *) &TiledObject_obj::POLYLINE,HX_HCSTRING("POLYLINE","\x40","\x3c","\x20","\x89")},
	{hx::fsInt,(void *) &TiledObject_obj::TILE,HX_HCSTRING("TILE","\x2e","\x93","\xbd","\x37")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TiledObject_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("xmlData","\xa1","\x27","\x79","\x6f"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("gid","\x02","\x84","\x4e","\x00"),
	HX_HCSTRING("properties","\xf3","\xfb","\x0e","\x61"),
	HX_HCSTRING("shared","\xa5","\x5e","\x2b","\x1d"),
	HX_HCSTRING("layer","\xd1","\x81","\xc0","\x6f"),
	HX_HCSTRING("objectType","\x19","\x69","\x41","\xcf"),
	HX_HCSTRING("flippedHorizontally","\xd3","\x6f","\x95","\xb0"),
	HX_HCSTRING("flippedVertically","\x65","\xbb","\x26","\xa7"),
	HX_HCSTRING("points","\x23","\x12","\x2e","\xf7"),
	HX_HCSTRING("getPoints","\x59","\x9b","\x84","\x73"),
	HX_HCSTRING("get_flippedHorizontally","\x6a","\x16","\xeb","\xb8"),
	HX_HCSTRING("get_flippedVertically","\x3c","\xbe","\xd4","\x25"),
	::String(null()) };

static void TiledObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TiledObject_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TiledObject_obj::FLIPPED_VERTICALLY_FLAG,"FLIPPED_VERTICALLY_FLAG");
	HX_MARK_MEMBER_NAME(TiledObject_obj::FLIPPED_HORIZONTALLY_FLAG,"FLIPPED_HORIZONTALLY_FLAG");
	HX_MARK_MEMBER_NAME(TiledObject_obj::RECTANGLE,"RECTANGLE");
	HX_MARK_MEMBER_NAME(TiledObject_obj::ELLIPSE,"ELLIPSE");
	HX_MARK_MEMBER_NAME(TiledObject_obj::POLYGON,"POLYGON");
	HX_MARK_MEMBER_NAME(TiledObject_obj::POLYLINE,"POLYLINE");
	HX_MARK_MEMBER_NAME(TiledObject_obj::TILE,"TILE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TiledObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TiledObject_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TiledObject_obj::FLIPPED_VERTICALLY_FLAG,"FLIPPED_VERTICALLY_FLAG");
	HX_VISIT_MEMBER_NAME(TiledObject_obj::FLIPPED_HORIZONTALLY_FLAG,"FLIPPED_HORIZONTALLY_FLAG");
	HX_VISIT_MEMBER_NAME(TiledObject_obj::RECTANGLE,"RECTANGLE");
	HX_VISIT_MEMBER_NAME(TiledObject_obj::ELLIPSE,"ELLIPSE");
	HX_VISIT_MEMBER_NAME(TiledObject_obj::POLYGON,"POLYGON");
	HX_VISIT_MEMBER_NAME(TiledObject_obj::POLYLINE,"POLYLINE");
	HX_VISIT_MEMBER_NAME(TiledObject_obj::TILE,"TILE");
};

#endif

hx::Class TiledObject_obj::__mClass;

static ::String TiledObject_obj_sStaticFields[] = {
	HX_HCSTRING("FLIPPED_VERTICALLY_FLAG","\xcb","\x82","\xb6","\x97"),
	HX_HCSTRING("FLIPPED_HORIZONTALLY_FLAG","\xdd","\x16","\x9f","\xd8"),
	HX_HCSTRING("RECTANGLE","\x0f","\x44","\xd5","\x14"),
	HX_HCSTRING("ELLIPSE","\xbe","\x14","\x5a","\x8b"),
	HX_HCSTRING("POLYGON","\x5a","\xd6","\x64","\x92"),
	HX_HCSTRING("POLYLINE","\x40","\x3c","\x20","\x89"),
	HX_HCSTRING("TILE","\x2e","\x93","\xbd","\x37"),
	::String(null())
};

void TiledObject_obj::__register()
{
	hx::Object *dummy = new TiledObject_obj;
	TiledObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.editors.tiled.TiledObject","\x8c","\x6c","\x12","\xc8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TiledObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TiledObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TiledObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TiledObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TiledObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TiledObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TiledObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TiledObject_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_30d0ee2c03993c65_18_boot)
HXLINE(  18)		FLIPPED_VERTICALLY_FLAG = (int)1073741824;
            	}
{
            	HX_STACKFRAME(&_hx_pos_30d0ee2c03993c65_19_boot)
HXLINE(  19)		FLIPPED_HORIZONTALLY_FLAG = (int)-2147483648;
            	}
{
            	HX_STACKFRAME(&_hx_pos_30d0ee2c03993c65_21_boot)
HXLINE(  21)		RECTANGLE = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_30d0ee2c03993c65_22_boot)
HXLINE(  22)		ELLIPSE = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_30d0ee2c03993c65_23_boot)
HXLINE(  23)		POLYGON = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_30d0ee2c03993c65_24_boot)
HXLINE(  24)		POLYLINE = (int)3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_30d0ee2c03993c65_25_boot)
HXLINE(  25)		TILE = (int)4;
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace editors
} // end namespace tiled
