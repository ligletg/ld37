// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Coin
#include <Coin.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledLayer
#include <flixel/addons/editors/tiled/TiledLayer.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledMap
#include <flixel/addons/editors/tiled/TiledMap.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledObject
#include <flixel/addons/editors/tiled/TiledObject.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledObjectLayer
#include <flixel/addons/editors/tiled/TiledObjectLayer.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledTileLayer
#include <flixel/addons/editors/tiled/TiledTileLayer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemapAutoTiling
#include <flixel/tile/FlxTilemapAutoTiling.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_17_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",17,0xb30d7781)
HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_26_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",26,0xb30d7781)
HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_52_placeEntities,"PlayState","placeEntities",0xcb21ad57,"PlayState.placeEntities","PlayState.hx",52,0xb30d7781)
HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_75_playerTouchCoin,"PlayState","playerTouchCoin",0x7f00763e,"PlayState.playerTouchCoin","PlayState.hx",75,0xb30d7781)
HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_82_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",82,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_17_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MaxSize,"MaxSize")
HXLINE(  17)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x46c2835d;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_26_create)
            	HX_STACK_THIS(this)
HXLINE(  27)		this->_map =  ::flixel::addons::editors::tiled::TiledMap_obj::__alloc( HX_CTX ,HX_("assets/data/map.tmx",34,ae,02,86),null());
HXLINE(  28)		this->_mWalls =  ::flixel::tile::FlxTilemap_obj::__alloc( HX_CTX );
HXLINE(  29)		 ::flixel::tile::FlxTilemap _hx_tmp = this->_mWalls;
HXDLIN(  29)		::Array< int > _hx_tmp1 = hx::TCast<  ::flixel::addons::editors::tiled::TiledTileLayer >::cast(this->_map->getLayer(HX_("walls",29,0c,1f,c5)))->get_tileArray();
HXDLIN(  29)		_hx_tmp->loadMapFromArray(_hx_tmp1,this->_map->width,this->_map->height,HX_("assets/images/tiles.png",35,bc,d1,f5),this->_map->tileWidth,this->_map->tileHeight,::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn(),(int)1,(int)2,(int)3);
HXLINE(  30)		this->_mWalls->follow(null(),null(),null());
HXLINE(  31)		this->_mWalls->setTileProperties((int)2,(int)0,null(),null(),null());
HXLINE(  32)		this->_mWalls->setTileProperties((int)3,(int)4369,null(),null(),null());
HXLINE(  33)		this->add(this->_mWalls);
HXLINE(  34)		this->_grpCoins =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  35)		this->add(this->_grpCoins);
HXLINE(  36)		this->_grpEnemies =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  37)		this->add(this->_grpEnemies);
HXLINE(  38)		this->_player =  ::Player_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  40)		{
HXLINE(  40)			HX_VARI( int,_g) = (int)0;
HXDLIN(  40)			HX_VARI( ::Array< ::Dynamic>,_g1) = ( ( ::flixel::addons::editors::tiled::TiledObjectLayer)(this->_map->getLayer(HX_("entities",41,96,95,92))) )->objects;
HXDLIN(  40)			while((_g < _g1->length)){
HXLINE(  40)				HX_VARI(  ::flixel::addons::editors::tiled::TiledObject,e) = _g1->__get(_g).StaticCast<  ::flixel::addons::editors::tiled::TiledObject >();
HXDLIN(  40)				_g = (_g + (int)1);
HXLINE(  43)				this->placeEntities(e->name,e->type,e->xmlData->x);
            			}
            		}
HXLINE(  46)		this->add(this->_player);
HXLINE(  47)		::flixel::FlxG_obj::camera->follow(this->_player,::flixel::FlxCameraFollowStyle_obj::TOPDOWN_dyn(),(int)1);
HXLINE(  48)		this->super::create();
            	}


void PlayState_obj::placeEntities(::String entityName,::String entityType, ::Xml entityData){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_52_placeEntities)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(entityName,"entityName")
            	HX_STACK_ARG(entityType,"entityType")
            	HX_STACK_ARG(entityData,"entityData")
HXLINE(  53)		HX_VARI( int,x) = ::Std_obj::parseInt(entityData->get(HX_("x",78,00,00,00)));
HXLINE(  54)		HX_VARI( int,y) = ::Std_obj::parseInt(entityData->get(HX_("y",79,00,00,00)));
HXLINE(  58)		if ((entityType == HX_("player",61,eb,b8,37))) {
HXLINE(  60)			this->_player->set_x(x);
HXLINE(  61)			this->_player->set_y(y);
            		}
            		else {
HXLINE(  63)			if ((entityType == HX_("coin",91,b5,c4,41))) {
HXLINE(  65)				 ::flixel::group::FlxTypedGroup _hx_tmp = this->_grpCoins;
HXDLIN(  65)				_hx_tmp->add( ::Coin_obj::__alloc( HX_CTX ,(x + (int)4),(y + (int)4))).StaticCast<  ::Coin >();
            			}
            			else {
HXLINE(  67)				if ((entityType == HX_("enemy",48,12,7b,70))) {
HXLINE(  69)					 ::flixel::group::FlxTypedGroup _hx_tmp1 = this->_grpEnemies;
HXDLIN(  69)					_hx_tmp1->add( ::Enemy_obj::__alloc( HX_CTX ,(x + (int)4),y,entityName)).StaticCast<  ::Enemy >();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,placeEntities,(void))

void PlayState_obj::playerTouchCoin( ::Player P, ::Coin C){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_75_playerTouchCoin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(P,"P")
            	HX_STACK_ARG(C,"C")
HXLINE(  75)		bool _hx_tmp;
HXDLIN(  75)		bool _hx_tmp1;
HXDLIN(  75)		bool _hx_tmp2;
HXDLIN(  75)		if (P->alive) {
HXLINE(  75)			_hx_tmp2 = P->exists;
            		}
            		else {
HXLINE(  75)			_hx_tmp2 = false;
            		}
HXDLIN(  75)		if (_hx_tmp2) {
HXLINE(  75)			_hx_tmp1 = C->alive;
            		}
            		else {
HXLINE(  75)			_hx_tmp1 = false;
            		}
HXDLIN(  75)		if (_hx_tmp1) {
HXLINE(  75)			_hx_tmp = C->exists;
            		}
            		else {
HXLINE(  75)			_hx_tmp = false;
            		}
HXDLIN(  75)		if (_hx_tmp) {
HXLINE(  77)			C->kill();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,playerTouchCoin,(void))

void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_82_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  83)		this->super::update(elapsed);
HXLINE(  84)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->_player) ),( ( ::flixel::FlxBasic)(this->_mWalls) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE(  85)		::flixel::FlxG_obj::overlap(this->_player,this->_grpCoins,this->playerTouchCoin_dyn(),null());
            	}



hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(_player,"_player");
	HX_MARK_MEMBER_NAME(_map,"_map");
	HX_MARK_MEMBER_NAME(_mWalls,"_mWalls");
	HX_MARK_MEMBER_NAME(_grpCoins,"_grpCoins");
	HX_MARK_MEMBER_NAME(_grpEnemies,"_grpEnemies");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_player,"_player");
	HX_VISIT_MEMBER_NAME(_map,"_map");
	HX_VISIT_MEMBER_NAME(_mWalls,"_mWalls");
	HX_VISIT_MEMBER_NAME(_grpCoins,"_grpCoins");
	HX_VISIT_MEMBER_NAME(_grpEnemies,"_grpEnemies");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_map") ) { return hx::Val( _map); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_player") ) { return hx::Val( _player); }
		if (HX_FIELD_EQ(inName,"_mWalls") ) { return hx::Val( _mWalls); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_grpCoins") ) { return hx::Val( _grpCoins); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_grpEnemies") ) { return hx::Val( _grpEnemies); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"placeEntities") ) { return hx::Val( placeEntities_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"playerTouchCoin") ) { return hx::Val( playerTouchCoin_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_map") ) { _map=inValue.Cast<  ::flixel::addons::editors::tiled::TiledMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_player") ) { _player=inValue.Cast<  ::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mWalls") ) { _mWalls=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_grpCoins") ) { _grpCoins=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_grpEnemies") ) { _grpEnemies=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"));
	outFields->push(HX_HCSTRING("_map","\x9d","\x4f","\x1e","\x3f"));
	outFields->push(HX_HCSTRING("_mWalls","\x1b","\xe2","\xa9","\x5b"));
	outFields->push(HX_HCSTRING("_grpCoins","\xfc","\xc6","\xf0","\x74"));
	outFields->push(HX_HCSTRING("_grpEnemies","\x60","\x48","\x72","\xc6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Player*/ ,(int)offsetof(PlayState_obj,_player),HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6")},
	{hx::fsObject /*::flixel::addons::editors::tiled::TiledMap*/ ,(int)offsetof(PlayState_obj,_map),HX_HCSTRING("_map","\x9d","\x4f","\x1e","\x3f")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(PlayState_obj,_mWalls),HX_HCSTRING("_mWalls","\x1b","\xe2","\xa9","\x5b")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,_grpCoins),HX_HCSTRING("_grpCoins","\xfc","\xc6","\xf0","\x74")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,_grpEnemies),HX_HCSTRING("_grpEnemies","\x60","\x48","\x72","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"),
	HX_HCSTRING("_map","\x9d","\x4f","\x1e","\x3f"),
	HX_HCSTRING("_mWalls","\x1b","\xe2","\xa9","\x5b"),
	HX_HCSTRING("_grpCoins","\xfc","\xc6","\xf0","\x74"),
	HX_HCSTRING("_grpEnemies","\x60","\x48","\x72","\xc6"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("placeEntities","\x28","\xe6","\x91","\x17"),
	HX_HCSTRING("playerTouchCoin","\x4f","\x45","\x8d","\xf2"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	hx::Object *dummy = new PlayState_obj;
	PlayState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

