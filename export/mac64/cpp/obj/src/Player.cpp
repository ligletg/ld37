// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_10_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",10,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_1[] = {
	(int)3,(int)4,(int)3,(int)5,
};
static const int _hx_array_data_6c4d5f81_2[] = {
	(int)6,(int)7,(int)6,(int)8,
};
static const int _hx_array_data_6c4d5f81_3[] = {
	(int)0,(int)1,(int)0,(int)2,
};
HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_28_movement,"Player","movement",0x91ad8bbc,"Player.movement","Player.hx",28,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_5[] = {
	(int)38,(int)87,
};
static const int _hx_array_data_6c4d5f81_6[] = {
	(int)40,(int)83,
};
static const int _hx_array_data_6c4d5f81_7[] = {
	(int)37,(int)65,
};
static const int _hx_array_data_6c4d5f81_8[] = {
	(int)39,(int)68,
};
HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_90_update,"Player","update",0xf1f8df56,"Player.update","Player.hx",90,0xa27fc9dd)

void Player_obj::__construct( ::Dynamic __o_X, ::Dynamic __o_Y){
 ::Dynamic X = __o_X.Default(0);
 ::Dynamic Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_10_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(  11)		this->speed = ((Float)200);
HXLINE(  14)		super::__construct(X,Y,null());
HXLINE(  16)		this->loadGraphic(HX_("assets/images/player.png",87,88,81,c6),true,(int)16,(int)16,null(),null());
HXLINE(  17)		::haxe::IMap_obj::set(this->_facingFlip,(int)1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),false)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  18)		::haxe::IMap_obj::set(this->_facingFlip,(int)16, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),true)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  19)		this->animation->add(HX_("lr",86,5e,00,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_1,4),(int)6,false,null(),null());
HXLINE(  20)		this->animation->add(HX_("u",75,00,00,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_2,4),(int)6,false,null(),null());
HXLINE(  21)		this->animation->add(HX_("d",64,00,00,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_3,4),(int)6,false,null(),null());
HXLINE(  22)		 ::flixel::math::FlxPoint _hx_tmp = this->drag;
HXDLIN(  22)		_hx_tmp->set_x(this->drag->set_y((int)1600));
HXLINE(  23)		this->setSize((int)8,(int)14);
HXLINE(  24)		this->offset->set((int)4,(int)2);
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x6c4d5f81;
	}
}

void Player_obj::movement(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_28_movement)
            	HX_STACK_THIS(this)
HXLINE(  29)		HX_VARI( bool,_up) = false;
HXLINE(  30)		HX_VARI( bool,_down) = false;
HXLINE(  31)		HX_VARI( bool,_left) = false;
HXLINE(  32)		HX_VARI( bool,_right) = false;
HXLINE(  34)		_up = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_5,2),(int)1);
HXLINE(  35)		_down = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_6,2),(int)1);
HXLINE(  36)		_left = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_7,2),(int)1);
HXLINE(  37)		_right = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_8,2),(int)1);
HXLINE(  39)		bool _hx_tmp;
HXDLIN(  39)		bool _hx_tmp1;
HXDLIN(  39)		bool _hx_tmp2;
HXDLIN(  39)		if (!(_up)) {
HXLINE(  39)			_hx_tmp2 = _down;
            		}
            		else {
HXLINE(  39)			_hx_tmp2 = true;
            		}
HXDLIN(  39)		if (!(_hx_tmp2)) {
HXLINE(  39)			_hx_tmp1 = _left;
            		}
            		else {
HXLINE(  39)			_hx_tmp1 = true;
            		}
HXDLIN(  39)		if (!(_hx_tmp1)) {
HXLINE(  39)			_hx_tmp = _right;
            		}
            		else {
HXLINE(  39)			_hx_tmp = true;
            		}
HXDLIN(  39)		if (_hx_tmp) {
HXLINE(  41)			HX_VARI( Float,mA) = (int)0;
HXLINE(  42)			if (_up) {
HXLINE(  44)				mA = (int)-90;
HXLINE(  45)				if (_left) {
HXLINE(  46)					mA = (mA - (int)45);
            				}
            				else {
HXLINE(  47)					if (_right) {
HXLINE(  48)						mA = (mA + (int)45);
            					}
            				}
HXLINE(  49)				this->set_facing((int)256);
            			}
            			else {
HXLINE(  51)				if (_down) {
HXLINE(  53)					mA = (int)90;
HXLINE(  54)					if (_left) {
HXLINE(  55)						mA = (mA + (int)45);
            					}
            					else {
HXLINE(  56)						if (_right) {
HXLINE(  57)							mA = (mA - (int)45);
            						}
            					}
HXLINE(  58)					this->set_facing((int)4096);
            				}
            				else {
HXLINE(  60)					if (_left) {
HXLINE(  62)						mA = (int)180;
HXLINE(  63)						this->set_facing((int)1);
            					}
            					else {
HXLINE(  65)						if (_right) {
HXLINE(  67)							mA = (int)0;
HXLINE(  68)							this->set_facing((int)16);
            						}
            					}
            				}
            			}
HXLINE(  71)			this->velocity->set(this->speed,(int)0);
HXLINE(  72)			 ::flixel::math::FlxPoint _hx_tmp3 = this->velocity;
HXDLIN(  72)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  72)			point->_inPool = false;
HXDLIN(  72)			point->_weak = true;
HXDLIN(  72)			_hx_tmp3->rotate(point,mA);
HXLINE(  74)			bool _hx_tmp4;
HXDLIN(  74)			bool _hx_tmp5;
HXDLIN(  74)			if ((this->velocity->x == (int)0)) {
HXLINE(  74)				_hx_tmp5 = (this->velocity->y != (int)0);
            			}
            			else {
HXLINE(  74)				_hx_tmp5 = true;
            			}
HXDLIN(  74)			if (_hx_tmp5) {
HXLINE(  74)				_hx_tmp4 = (this->touching == (int)0);
            			}
            			else {
HXLINE(  74)				_hx_tmp4 = false;
            			}
HXDLIN(  74)			if (_hx_tmp4) {
HXLINE(  76)				switch((int)(this->facing)){
            					case (int)1: case (int)16: {
HXLINE(  79)						this->animation->play(HX_("lr",86,5e,00,00),null(),null(),null());
            					}
            					break;
            					case (int)256: {
HXLINE(  81)						this->animation->play(HX_("u",75,00,00,00),null(),null(),null());
            					}
            					break;
            					case (int)4096: {
HXLINE(  83)						this->animation->play(HX_("d",64,00,00,00),null(),null(),null());
            					}
            					break;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,movement,(void))

void Player_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_90_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  91)		this->movement();
HXLINE(  92)		this->super::update(elapsed);
            	}



hx::ObjectPtr< Player_obj > Player_obj::__new( ::Dynamic __o_X, ::Dynamic __o_Y) {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(__o_X,__o_Y);
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_X, ::Dynamic __o_Y) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y);
	return __this;
}

Player_obj::Player_obj()
{
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"movement") ) { return hx::Val( movement_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Player_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("movement","\x2f","\x85","\x37","\x00"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

